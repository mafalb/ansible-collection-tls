# vim: set ft=yaml ts=2 expandtab:
---

- name: assertions
  assert:
    that:
      - chain|default([])|type_debug == 'list'
      - not (chain is defined and remote_chain is defined)
      - remote_chain|default([])|type_debug == 'list'
      - root|default([])|type_debug == 'list'
      - alias is defined
      - cert is defined or remote_cert is defined
      - not (cert is defined and remote_cert is defined)
      - key is defined or remote_key is defined
      - not (key is defined and remote_key is defined)
      - tls_file_layouts|type_debug == 'list'

- name: "{{ alias }}.cert is present"
  when: cert is defined
  copy:
    src: "{{ playbook_dir }}/{{ cert }}"
    dest: "{{ cert_dir|default(tls_default_cert_dir) }}/{{ alias }}.cert"
    mode: go+r
    backup: true
  notify: check for changed cert

- name: "{{ alias }}.cert is present"
  when: remote_cert is defined
  copy:
    remote_src: true
    src: "{{ cert_dir|default(tls_default_cert_dir) }}/{{ remote_cert }}"
    dest: "{{ cert_dir|default(tls_default_cert_dir) }}/{{ alias }}.cert"
    mode: go+r
    backup: true
  notify: check for changed cert

- block:

  - name: CA certificates for {{ alias }} does exist
    when:
    - root is defined
    - root|length > 1
    loop: "{{ root }}"
    copy:
      src: "{{ playbook_dir }}/{{ item }}"
      dest: "{{ cert_dir|default(tls_default_cert_dir) }}/{{ alias }}.root{{ i + 1 }}.cert"
      mode: go+r
      backup: true
    loop_control:
      index_var: i

  - name: "{{ alias }}.root.pem is present"
    when: root is defined
    template:
      src: root.j2
      dest: "{{ cert_dir|default(tls_default_cert_dir) }}/{{ alias }}.root.pem"
      mode: go+r
      backup: true

  # root.cert changed to root.pem
  #
  - name: "{{ alias }}.root.cert is absent"
    when: root is defined
    file:
      path: "{{ cert_dir|default(tls_default_cert_dir) }}/{{ alias }}.root.cert"
      state: absent

  - name: intermediate certificates for {{ alias }} are present
    when: chain is defined
    loop: "{{ chain }}"
    copy:
      src: "{{ item }}"
      dest: "{{ cert_dir|default(tls_default_cert_dir) }}/{{ (item|basename|splitext)[0] }}.cert"
      mode: go+r

- debug: var=key|default(remote_key)
  no_log: true
  tags:
  - never
  - debug

- name: "{{ alias }}.key is present"
  block:

  - name: key for {{ alias }} does exist
    copy:
      remote_src: true
      src: "{{ key_dir|default(tls_default_key_dir) }}/{{ remote_key|default(key) }}"
      dest: "{{ key_dir|default(tls_default_key_dir) }}/{{ alias }}.key"
      backup: true
      mode: "{{ tls_key_mode }}"
    notify: check for changed key

  - name: read in {{ key }}
    no_log: true
    command: cat "{{ key_dir|default(tls_default_key_dir) }}/{{ key|default(remote_key) }}"
    check_mode: false
    changed_when: false
    register: __key

- name: read in chain {{ alias }}
  when: remote_chain is defined
  loop: "{{ remote_chain }}"
  check_mode: false
  changed_when: false
  slurp:
    src: "{{ cert_dir|default(tls_default_cert_dir) }}/{{ item }}"
  register: __chain

- debug:
    var: __chain
  tags:
  - never
  - debug

- name: read in cert for {{ alias }}
  when: remote_cert is defined
  check_mode: false
  changed_when: false
  slurp:
    src: "{{ cert_dir|default(tls_default_cert_dir) }}/{{ remote_cert }}"
  register: _tls_cert

- name: "{{ alias }}.pem is present"
  when: "'privatepem' in tls_file_layouts"
  no_log: true
  template:
    src: pem.j2
    dest: "{{ key_dir|default(tls_default_key_dir) }}/{{ alias }}.pem"
    mode: "{{ tls_key_mode }}"
    backup: true
  notify: check for changed private pem

- name: "{{ alias }}.chain.pem is present"
  template:
    src: chain.j2
    dest: "{{ cert_dir|default(tls_default_cert_dir) }}/{{ alias }}.chain.pem"
    mode: "00444"
    backup: true
  notify: check for changed chain

- name: "{{ alias }}.fullchain.pem is present"
  template:
    src: fullchain.j2
    dest: "{{ cert_dir|default(tls_default_cert_dir) }}/{{ alias }}.fullchain.pem"
    mode: "00444"
    backup: true
  notify: check for changed chain

- name: cert matches key for {{ alias }}
  block:

  - name: get modulus of cert for {{ alias }}
    command: openssl x509 -modulus -in {{ cert_dir|default(tls_default_cert_dir) }}/{{ alias }}.cert -noout
    register: _cert_modulus
    changed_when: false
    check_mode: false

  - name: get modulus of key for {{ alias }}
    command: openssl rsa -modulus -in {{ key_dir|default(tls_default_key_dir) }}/{{ alias }}.key -noout
    register: _key_modulus
    changed_when: false
    check_mode: false

  - name: assertions
    assert:
      that:
      - _cert_modulus.stdout == _key_modulus.stdout

- name: verify cert for {{ alias }}
  block:

  - name: openssl verify for {{ alias }}
    command: openssl verify -CAfile {{ cert_dir|default(tls_default_cert_dir) }}/{{ alias }}.root.pem -untrusted {{ cert_dir|default(tls_default_cert_dir) }}/{{ alias }}.chain.pem {{ cert_dir|default(tls_default_cert_dir) }}/{{ alias }}.cert # noqa 204
    register: _cert_verify
    check_mode: false
    changed_when: false

  - name: assert {{ alias }}
    assert:
      that:
      - _cert_verify.rc == 0

...
